# Edit this file for local setup changes
# Uncommenting the following line tells makesetup that all following
# modules are to be built as shared libraries (see above for more
# detail; also note that *static* reverses this effect):



# The zipimport module is always imported at startup. Having it as a
# builtin module avoids some bootstrapping problems and reduces overhead.
#zipimport zipimport.c

#posix posixmodule.c		# posix (UNIX) system calls
#errno errnomodule.c		# posix (UNIX) errno values
#pwd pwdmodule.c			# this is needed to find out the user's home dir

#_sre _sre.c			# Fredrik Lundh's new regular expressions
#_codecs _codecsmodule.c		# access to the builtin codecs and codec registry
#_weakref _weakref.c		# weak references
#_functools _functoolsmodule.c   # Tools for working with functions and callable objects
#_operator _operator.c	        # operator.add() and similar goodies
#_collections _collectionsmodule.c # Container types
#itertools itertoolsmodule.c    # Functions creating iterators for efficient looping
#atexit atexitmodule.c      # Register functions to be run at interpreter-shutdown
#_signal signalmodule.c
#_stat _stat.c			# stat.h interface
#time timemodule.c -lm # time operations and variables
# access to ISO C locale support
#_locale _localemodule.c  # -lintl

# Standard I/O baseline
#_io -I$(srcdir)/Modules/_io _io/bufferedio.c _io/bytesio.c _io/fileio.c _io/iobase.c _io/_iomodule.c _io/stringio.c _io/textio.c


#faulthandler faulthandler.c # faulthandler module
#_tracemalloc _tracemalloc.c hashtable.c # debug tool to trace memory blocks allocated by Python
#_symtable symtablemodule.c # The Python symtable module depends on .h files that setup.py doesn't track
#readline readline.c -lreadline -ltermcap
# _weakref _weakref.c	# basic weak reference support

*shared*

array arraymodule.c	# array objects
cmath cmathmodule.c _math.c -lm # complex math library functions
math mathmodule.c _math.c -lm # math library functions, e.g. sin()
_struct _struct.c	# binary structure packing/unpacking
_queue _queue.c		# binary for remote debuging in enaml-native

_testcapi _testcapimodule.c    # Python C API test module
_random _randommodule.c	# Random number generator
_elementtree -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI _elementtree.c	# elementtree accelerator
_pickle _pickle.c	# pickle accelerator
_datetime _datetimemodule.c	# datetime accelerator
_bisect _bisectmodule.c	# Bisection algorithms
_heapq _heapqmodule.c	# Heap queue algorithm
_opcode _opcode.c	# _opcode module
_asyncio _asynciomodule.c  # Fast asyncio Future
unicodedata unicodedata.c    # static Unicode character database
fcntl fcntlmodule.c	# fcntl(2) and ioctl(2)
#spwd spwdmodule.c		# spwd(3)
#grp grpmodule.c		# grp(3)
select selectmodule.c	# select(2); not on ancient System V
parser parsermodule.c # Fred Drake's interface to the Python parser
mmap mmapmodule.c # Memory-mapped files (also works on Win32).
syslog syslogmodule.c		# syslog daemon interface
_csv _csv.c # CSV file helper
_json _json.c # _json speedups
_socket socketmodule.c # Socket module helper for socket(2)

_lsprof _lsprof.c rotatingtree.c # profilers (_lsprof is for cProfile.py)
binascii binascii.c # Helper module for various ascii-encoders

termios termios.c	# Steen Lumholt's termios module
resource resource.c	# Jeremy Hylton's rlimit interface
_posixsubprocess _posixsubprocess.c  # POSIX subprocess module helper



# Socket module helper for SSL support; you must comment out the other
# socket line above, and possibly edit the SSL variable:
SSL=/usr/local/ssl # Replace build build.sh
_hashlib _hashopenssl.c -I$(SSL)/include -I$(SSL)/include/openssl \
                        	-L$(SSL)/lib -lssl -lcrypto
_ssl _ssl.c \
	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
	-L$(SSL)/lib -lssl -lcrypto

# The crypt module is now disabled by default because it breaks builds
# on many systems (where -lcrypt is needed), e.g. Linux (I believe).
#
# First, look at Setup.config; configure may have set this for you.

#_crypt _cryptmodule.c # -lcrypt	# crypt(3); needs -lcrypt on some systems


#nis nismodule.c -lnsl	# Sun yellow pages -- not everywhere


# Note that the _md5 and _sha modules are normally only built if the
# system does not have the OpenSSL libs containing an optimized version.

# The _md5 module implements the RSA Data Security, Inc. MD5
# Message-Digest Algorithm, described in RFC 1321.

_md5 md5module.c

# The _sha module implements the SHA checksum algorithms.
# (NIST's Secure Hash Algorithms.)
_sha1 sha1module.c
_sha256 sha256module.c
_sha512 sha512module.c
_sha3 _sha3/sha3module.c

# _blake module

_blake2 _blake2/blake2module.c _blake2/blake2b_impl.c _blake2/blake2s_impl.c


# Curses support, requiring the System V version of curses, often
# provided by the ncurses library.  e.g. on Linux, link with -lncurses
# instead of -lcurses).
#
# First, look at Setup.config; configure may have set this for you.

#_curses _cursesmodule.c -lcurses -ltermcap
# Wrapper for the panel library that's part of ncurses and SYSV curses.
#_curses_panel _curses_panel.c -lpanel -lncurses

# Modules that provide persistent dictionary-like semantics.  You will
# probably want to arrange for at least one of them to be available on
# your machine, though none are defined by default because of library
# dependencies.  The Python module dbm/__init__.py provides an
# implementation independent wrapper for these; dbm/dumb.py provides
# similar functionality (but slower of course) implemented in Python.

# The standard Unix dbm module has been moved to Setup.config so that
# it will be compiled as a shared library by default.  Compiling it as
# a built-in module causes conflicts with the pybsddb3 module since it
# creates a static dependency on an out-of-date version of db.so.
#
# First, look at Setup.config; configure may have set this for you.
#_dbm _dbmmodule.c 	# dbm(3) may require -lndbm or similar

# Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:
#
# First, look at Setup.config; configure may have set this for you.
#_gdbm _gdbmmodule.c -I/usr/local/include -L/usr/local/lib -lgdbm


# Lee Busby's SIGFPE modules.
# The library to link fpectl with is platform specific.
# Choose *one* of the options below for fpectl:

# For SGI IRIX (tested on 5.3):
#fpectl fpectlmodule.c -lfpe

# For Solaris with SunPro compiler (tested on Solaris 2.5 with SunPro C 4.2):
# (Without the compiler you don't have -lsunmath.)
#fpectl fpectlmodule.c -R/opt/SUNWspro/lib -lsunmath -lm

# For other systems: see instructions in fpectlmodule.c.
#fpectl fpectlmodule.c ...

# Test module for fpectl.  No extra libraries needed.
#fpetest fpetestmodule.c

# Andrew Kuchling's zlib module.
# This require zlib 1.1.3 (or later).
# See http://www.gzip.org/zlib/
zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
_lzma _lzmamodule.c -llzma # LZMA compression support.
_bz2 _bz2module.c -lbz2 # Gustavo Niemeyer's bz2 module.

# Interface to the Expat XML parser
#
# Expat was written by James Clark and is now maintained by a group of
# developers on SourceForge; see www.libexpat.org for more
# information.  The pyexpat module was written by Paul Prescod after a
# prototype by Jack Jansen.  Source of Expat 1.95.2 is included in
# Modules/expat/.  Usage of a system shared libexpat.so/expat.dll is
# not advised.
#
# More information on Expat can be found at www.libexpat.org.
#
pyexpat expat/xmlparse.c expat/xmlrole.c expat/xmltok.c pyexpat.c -I$(srcdir)/Modules/expat -DHAVE_EXPAT_CONFIG_H -DUSE_PYEXPAT_CAPI -DXML_POOR_ENTROPY

# Hye-Shik Chang's CJKCodecs

# multibytecodec is required for all the other CJK codec modules
_multibytecodec cjkcodecs/multibytecodec.c

_codecs_cn cjkcodecs/_codecs_cn.c
_codecs_hk cjkcodecs/_codecs_hk.c
_codecs_iso2022 cjkcodecs/_codecs_iso2022.c
_codecs_jp cjkcodecs/_codecs_jp.c
_codecs_kr cjkcodecs/_codecs_kr.c
_codecs_tw cjkcodecs/_codecs_tw.c


# Special inclusion for sqlite3
_sqlite3 -DSQLITE_OMIT_LOAD_EXTENSION _sqlite/cache.c _sqlite/microprotocols.c _sqlite/row.c _sqlite/connection.c _sqlite/module.c _sqlite/statement.c _sqlite/cursor.c _sqlite/prepare_protocol.c _sqlite/util.c -lsqlite3

# Multiprocessing
_multiprocessing -I$(srcdir)/Modules/_multiprocessing _multiprocessing/multiprocessing.c _multiprocessing/semaphore.c

# Ctypes
_ctypes -I$(srcdir)/Modules/_ctypes _ctypes/_ctypes.c _ctypes/callbacks.c _ctypes/callproc.c _ctypes/stgdict.c _ctypes/cfield.c -lffi


# Must have newline at end
